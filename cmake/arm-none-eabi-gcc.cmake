set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)

# Extract toolchain directory
set(TOOLCHAIN_NAME arm-none-eabi)
if(DEFINED ENV{ARMGCC_DIR})
    set(TOOLCHAIN_DIR $ENV{ARMGCC_DIR})
    set(TOOLCHAIN_BIN_DIR "${TOOLCHAIN_DIR}/bin")
else()
    find_program(ARMGCC_BIN ${TOOLCHAIN_NAME}-gcc REQUIRED)
    get_filename_component(TOOLCHAIN_BIN_DIR ${ARMGCC_BIN} DIRECTORY)
endif()

# Set cross-compiler
set(CMAKE_ASM_COMPILER ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN_NAME}-gcc)
set(CMAKE_C_COMPILER ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN_NAME}-gcc)
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN_NAME}-g++)

set(CMAKE_OBJCOPY ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN_NAME}-objcopy CACHE INTERNAL "objcopy tool")
set(CMAKE_OBJDUMP ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN_NAME}-objdump CACHE INTERNAL "objdump tool")
set(CMAKE_SIZE_UTIL ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN_NAME}-size CACHE INTERNAL "size tool")
set(CMAKE_GDB ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN_NAME}-gdb CACHE INTERNAL "gdb tool")

set(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_DIR}/${TOOLCHAIN_NAME})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

# Do not to try to link executables during its checks.
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
